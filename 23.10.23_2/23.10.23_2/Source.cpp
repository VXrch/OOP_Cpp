#include <iostream>

using namespace std;

class Date {

	int day;
	int month;
	int year;

public:

	Date() : day(0), month(0), year(0) {}


};

void main() {

	/*								«авданн€ 2:
		—твор≥ть клас з ≥м'€м ЂDateї дл€ збер≥ганн€ дати (день, м≥с€ць, р≥к).
			Ќапиш≥ть необх≥дн≥ конструктори та метод дл€ зб≥льшенн€ дати на 1 день.
		
		” клас≥ повинн≥ бути перевантажен≥ операц≥њњ :
		[ ++ ], [ ЦЦ ] (≥нкремент та декремент) Ц додаЇ чи в≥дм≥наЇ один день в≥д дати.
			–еал≥зувати обидв≥ форми оператора(постф≥ксна, преф≥ксна).
		[ != ],[ == ],[ > ],[ < ] (пор≥вн€нн€)Ц пор≥внюють два обТЇкта по величин≥ значень
		[ += ],[ Ц = ] (додаванн€ та в≥дн≥манн€) Ц виконуЇ додаванн€ чи в≥дн≥манн€ певноњ
			к≥лькост≥ дн≥в до об'Їкта. “обто другим операндом буде ц≥ле число.
		[ () ] (кругл≥ дужки) Ц додаЇ до дати певне значенн€, маЇ 3 перевантаженн€:
		
		1.(int days) Ц додаЇ певну к≥льк≥сть дн≥в
		2.(int months, int days) Ц додаЇ певну к≥льк≥сть дн≥в та м≥с€ц≥в
		3.(int years, int months, int days) Ц додаЇ певну к≥льк≥сть дн≥в, м≥с€ц≥в та рок≥в
		
		ќператори ≥нкременту та декременту перевантажити за допомогою глобальних функц≥й.
		ќператори пор≥вн€нн€ Ц дружн≥ми функц≥€ми, вс≥ ≥нш≥ Ц методами класу.
	*/



}